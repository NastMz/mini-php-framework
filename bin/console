#!/usr/bin/env php
<?php
declare(strict_types=1);

require_once __DIR__ . '/../vendor/autoload.php';

use App\Infrastructure\Config\EnvLoader;
use App\Infrastructure\Console\Application;
use App\Infrastructure\Console\Commands\MakeControllerCommand;
use App\Infrastructure\Console\Commands\MakeMigrationCommand;
use App\Infrastructure\Console\Commands\MakeSeederCommand;
use App\Infrastructure\Console\Commands\MakeMiddlewareCommand;
use App\Infrastructure\Console\Commands\ClearCacheCommand;
use App\Infrastructure\Console\Commands\ServeCommand;
use App\Infrastructure\Console\Commands\MigrateCommand;
use App\Infrastructure\Console\Commands\ListRoutesCommand;
use App\Infrastructure\Console\Commands\GenerateKeyCommand;
use App\Infrastructure\Console\Commands\HealthCheckCommand;
use App\Infrastructure\Console\Commands\DatabaseInitCommand;
use App\Infrastructure\Console\Commands\LogTestCommand;
use App\Infrastructure\Console\Commands\TestEventsCommand;
use App\Infrastructure\Console\Commands\TestCqrsCommand;
use App\Infrastructure\Logging\LoggerInterface;
use App\Infrastructure\Event\DomainEventDispatcher;
use App\Application\Command\CommandBusInterface;
use App\Application\Query\QueryBusInterface;

// Load environment variables
EnvLoader::load();

// Load container
$container = require_once __DIR__ . '/../bootstrap/dependencies.php';

$app = new Application('MiniFramework CLI', '1.0.0');

// Register commands
$app->addCommand(new MakeControllerCommand());
$app->addCommand(new MakeMigrationCommand());
$app->addCommand(new MakeSeederCommand());
$app->addCommand(new MakeMiddlewareCommand());
$app->addCommand(new ClearCacheCommand());
$app->addCommand(new ServeCommand());
$app->addCommand(new MigrateCommand());
$app->addCommand(new ListRoutesCommand());
$app->addCommand(new GenerateKeyCommand());
$app->addCommand(new HealthCheckCommand());
$app->addCommand(new DatabaseInitCommand());
$app->addCommand(new LogTestCommand($container->get(LoggerInterface::class)));
$app->addCommand(new TestEventsCommand($container->get(DomainEventDispatcher::class)));
$app->addCommand(new TestCqrsCommand(
    $container->get(CommandBusInterface::class),
    $container->get(QueryBusInterface::class)
));

// Run the application
exit($app->run($argv));
