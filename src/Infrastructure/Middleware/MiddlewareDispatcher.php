<?php
declare(strict_types=1);

namespace App\Infrastructure\Middleware;

use App\Infrastructure\Http\RequestInterface;
use App\Infrastructure\Http\ResponseInterface;

/**
 * Class MiddlewareDispatcher
 *
 * This class is responsible for dispatching requests through a stack of middleware.
 * It implements the RequestHandlerInterface, allowing it to be used in a PSR-15 middleware pipeline.
 */
class MiddlewareDispatcher implements RequestHandlerInterface
{
    /** @var MiddlewareInterface[] */
    private array $middleware;

    private RequestHandlerInterface $finalHandler;

    /**
     * @param MiddlewareInterface[]    $middleware
     * @param RequestHandlerInterface $finalHandler
     */
    public function __construct(array $middleware, RequestHandlerInterface $finalHandler)
    {
        $this->middleware   = $middleware;
        $this->finalHandler = $finalHandler;
    }

    /**
     * Handles the incoming request by processing it through the middleware stack.
     *
     * @param RequestInterface $request The incoming request to be processed
     * @return ResponseInterface The response generated by the middleware stack
     */
    public function handle(RequestInterface $request): ResponseInterface
    {
        // Build the middleware stack, ending in the final handler
        $runner = array_reduce(
            array_reverse($this->middleware),
            fn(RequestHandlerInterface $next, MiddlewareInterface $mw): RequestHandlerInterface =>
                new class($mw, $next) implements RequestHandlerInterface {
                    private MiddlewareInterface $middleware;
                    private RequestHandlerInterface $next;

                    public function __construct(MiddlewareInterface $middleware, RequestHandlerInterface $next)
                    {
                        $this->middleware = $middleware;
                        $this->next       = $next;
                    }

                    public function handle(RequestInterface $request): ResponseInterface
                    {
                        return $this->middleware->process($request, $this->next);
                    }
                },
            $this->finalHandler
        );

        return $runner->handle($request);
    }
}
